name: CI - Tests & Quality Checks

on:
  push:
    branches: [development, master, main]
  pull_request:
    branches: [development, master, main]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  # First job: Check if we need to run tests based on changed files
  check-relevance:
    name: Check Release Relevance
    runs-on: ubuntu-latest
    outputs:
      should-test: ${{ steps.check.outputs.should-release }}
      reason: ${{ steps.check.outputs.reason }}
      version-type: ${{ steps.check.outputs.version-type }}
      next-version: ${{ steps.check.outputs.next-version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check release relevance
        id: check
        uses: ./.github/actions/check-release-relevance
        with:
          base-ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || 'origin/master' }}
          head-ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}

      - name: Comment on PR with analysis
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const shouldTest = '${{ steps.check.outputs.should-release }}' === 'true';
            const reason = '${{ steps.check.outputs.reason }}';
            const versionType = '${{ steps.check.outputs.version-type }}';
            const nextVersion = '${{ steps.check.outputs.next-version }}';
            
            let body = `## 🔍 CI Analysis\n\n`;
            
            if (shouldTest) {
              body += `### ✅ Tests Required\n\n`;
              body += `**Reason:** ${reason}\n`;
              if (nextVersion) {
                body += `**Impact:** ${versionType} release → version \`${nextVersion}\`\n`;
              }
              body += `\n### 🚀 What will happen:\n`;
              body += `1. Full test suite will run\n`;
              body += `2. Code quality checks will execute\n`;
              body += `3. Build verification will be performed\n`;
              if (nextVersion) {
                body += `4. If merged to master → Auto-release to \`${nextVersion}\`\n`;
              }
            } else {
              body += `### ⏭️ Tests Skipped\n\n`;
              body += `**Reason:** ${reason}\n\n`;
              body += `Only documentation or CI configuration files were changed.\n`;
              body += `No tests or quality checks needed.`;
            }
            
            // Find existing comment and update or create new one
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('🔍 CI Analysis')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  # Only run tests if changes are relevant
  test:
    name: Maven Tests (Java 17)
    runs-on: ubuntu-latest
    needs: check-relevance
    if: needs.check-relevance.outputs.should-test == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: mvn clean test

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Maven Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            target/surefire-reports/
            target/site/jacoco/

  # Only run quality checks if changes are relevant
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    needs: [check-relevance, test]
    if: needs.check-relevance.outputs.should-test == 'true' && (success() || failure())

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run quality checks
        run: |
          echo "Running code quality analysis..."
          mvn clean compile -Pquality
          mvn -Pquality spotbugs:check pmd:check checkstyle:check

      - name: Generate coverage report
        run: mvn jacoco:report

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            target/site/jacoco/
            target/jacoco.exec

  # Only run build verification if tests passed
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [check-relevance, test, code-quality]
    if: needs.check-relevance.outputs.should-test == 'true' && needs.test.result == 'success' && needs.code-quality.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and package
        run: |
          mvn clean package -DskipTests
          mvn javadoc:javadoc

      - name: Verify artifacts
        run: |
          echo "Verifying generated artifacts..."
          ls -la target/

          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Project version: $VERSION"

          # Check that all required artifacts exist
          if [ -f "target/logging-library-${VERSION}.jar" ]; then
            echo "✅ Main JAR exists"
          else
            echo "❌ Main JAR missing"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            target/*.jar
            target/site/apidocs/
          retention-days: 7

  # Dependency review only for PRs
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    needs: check-relevance
    if: github.event_name == 'pull_request' && needs.check-relevance.outputs.should-test == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  # Performance tests only when needed and not on every commit
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [check-relevance, test]
    if: needs.check-relevance.outputs.should-test == 'true' && (github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/master')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run performance tests
        run: |
          echo "Running performance tests..."
          mvn test -Dtest=**/*PerformanceTest

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: target/performance-reports/

  # Summary job that runs always
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [check-relevance, test, code-quality, build-verification]
    if: always()

    steps:
      - name: Generate CI Summary
        run: |
          echo "## 🔍 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          SHOULD_TEST="${{ needs.check-relevance.outputs.should-test }}"
          REASON="${{ needs.check-relevance.outputs.reason }}"
          
          if [ "$SHOULD_TEST" = "true" ]; then
            echo "### ✅ Full CI Pipeline Executed" >> $GITHUB_STEP_SUMMARY
            echo "**Reason:** $REASON" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Test Results" >> $GITHUB_STEP_SUMMARY
            echo "- **Unit & Integration Tests:** ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Code Quality Checks:** ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Build Verification:** ${{ needs.build-verification.result }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Check if all checks passed
            if [[ "${{ needs.test.result }}" == "success" && "${{ needs.code-quality.result }}" == "success" && "${{ needs.build-verification.result }}" == "success" ]]; then
              echo "### ✅ All Checks Passed!" >> $GITHUB_STEP_SUMMARY
              echo "The logging library is ready for release." >> $GITHUB_STEP_SUMMARY
              
              NEXT_VERSION="${{ needs.check-relevance.outputs.next-version }}"
              if [ -n "$NEXT_VERSION" ]; then
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "**Next Release:** \`$NEXT_VERSION\` (when merged to master)" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "### ❌ Some Checks Failed" >> $GITHUB_STEP_SUMMARY
              echo "Please review the failed jobs above." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ⏭️ CI Pipeline Skipped" >> $GITHUB_STEP_SUMMARY
            echo "**Reason:** $REASON" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No tests needed - only documentation or CI configuration changes detected." >> $GITHUB_STEP_SUMMARY
          fi