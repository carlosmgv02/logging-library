name: CI - Tests & Quality Checks

on:
  push:
    branches: [ master, main, development, feature/*, fix/* ]
  pull_request:
    branches: [ master, main, development ]
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        java-version: [17, 21]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run unit tests
        run: |
          echo "Running unit tests..."
          mvn test -Dtest="**/unit/**"

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          mvn test -Dtest="**/integration/**"

      - name: Generate test report
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Maven Tests (Java ${{ matrix.java-version }})
          path: target/surefire-reports/*.xml
          reporter: java-junit

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-java${{ matrix.java-version }}
          path: |
            target/surefire-reports/
            target/failsafe-reports/

  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for SonarQube

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Compile project
        run: mvn clean compile

      - name: Run SpotBugs analysis
        run: |
          echo "Running SpotBugs static analysis..."
          mvn spotbugs:check

      - name: Run PMD analysis
        run: |
          echo "Running PMD code analysis..."
          mvn pmd:check

      - name: Run Checkstyle
        run: |
          echo "Running Checkstyle..."
          mvn checkstyle:check

      - name: Generate code coverage report
        run: |
          echo "Generating code coverage report..."
          mvn test jacoco:report

      - name: SonarQube Scan (if configured)
        if: env.SONAR_TOKEN != ''
        run: |
          echo "Running SonarQube analysis..."
          mvn sonar:sonar \
            -Dsonar.projectKey=${{ github.repository_owner }}_logging-library \
            -Dsonar.organization=${{ github.repository_owner }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Upload SpotBugs results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: spotbugs-report
          path: target/spotbugsXml.xml

      - name: Upload PMD results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pmd-report
          path: target/pmd.xml

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            target/site/jacoco/
            target/jacoco.exec

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os}}-m2

      - name: Run OWASP Dependency Check
        run: |
          echo "Running OWASP dependency vulnerability scan..."
          mvn org.owasp:dependency-check-maven:check

      - name: Upload OWASP report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check-report
          path: target/dependency-check-report.html

      - name: Run Snyk security scan (if configured)
        if: env.SNYK_TOKEN != ''
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [test, code-quality, security-scan]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build project
        run: |
          echo "Building project with all profiles..."
          mvn clean package -DskipTests

      - name: Generate documentation
        run: |
          echo "Generating Javadoc..."
          mvn javadoc:javadoc

      - name: Generate sources JAR
        run: |
          echo "Generating sources JAR..."
          mvn source:jar

      - name: Verify artifacts
        run: |
          echo "Verifying generated artifacts..."
          ls -la target/

          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Project version: $VERSION"

          # Check that all required artifacts exist
          if [ -f "target/logging-library-${VERSION}.jar" ]; then
            echo "✅ Main JAR exists"
          else
            echo "❌ Main JAR missing"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            target/*.jar
            target/site/apidocs/
          retention-days: 7

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run performance tests
        run: |
          echo "Running performance benchmarks..."
          # Add JMH or other performance testing framework here
          mvn test -Dtest="**/performance/**" -DfailIfNoTests=false

      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: target/performance-reports/

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test, code-quality, security-scan, build-verification]
    if: always()

    steps:
      - name: Generate CI Summary
        run: |
          echo "## 🔍 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Unit & Integration Tests:** ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality Checks:** ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan:** ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Verification:** ${{ needs.build-verification.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.test.result }}" == "success" && "${{ needs.code-quality.result }}" == "success" && "${{ needs.security-scan.result }}" == "success" && "${{ needs.build-verification.result }}" == "success" ]]; then
            echo "### ✅ All Checks Passed!" >> $GITHUB_STEP_SUMMARY
            echo "The logging library is ready for release." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Some Checks Failed" >> $GITHUB_STEP_SUMMARY
            echo "Please review the failed jobs above." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Available Reports" >> $GITHUB_STEP_SUMMARY
          echo "- Test results and coverage reports" >> $GITHUB_STEP_SUMMARY
          echo "- Static analysis reports (SpotBugs, PMD, Checkstyle)" >> $GITHUB_STEP_SUMMARY
          echo "- Security vulnerability reports" >> $GITHUB_STEP_SUMMARY
          echo "- Build artifacts and documentation" >> $GITHUB_STEP_SUMMARY