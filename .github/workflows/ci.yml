name: CI - Pull Request Validation

on:
  pull_request:
    branches: [development, master, main]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

jobs:
  # Check if we need to run full validation
  check-relevance:
    name: Check Changes Relevance
    runs-on: ubuntu-latest
    outputs:
      should-validate: ${{ steps.check.outputs.should-release }}
      reason: ${{ steps.check.outputs.reason }}
      version-type: ${{ steps.check.outputs.version-type }}
      next-version: ${{ steps.check.outputs.next-version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check release relevance
        id: check
        uses: ./.github/actions/check-release-relevance
        with:
          base-ref: ${{ github.event.pull_request.base.sha }}
          head-ref: ${{ github.event.pull_request.head.sha }}

      - name: Comment PR with impact analysis
        uses: actions/github-script@v7
        with:
          script: |
            const shouldValidate = '${{ steps.check.outputs.should-release }}' === 'true';
            const reason = '${{ steps.check.outputs.reason }}';
            const versionType = '${{ steps.check.outputs.version-type }}';
            const nextVersion = '${{ steps.check.outputs.next-version }}';
            const targetBranch = '${{ github.event.pull_request.base.ref }}';
            
            let body = `## 🔍 Pull Request Impact Analysis\n\n`;
            
            if (shouldValidate) {
              body += `### ✅ Full Validation Required\n\n`;
              body += `**Reason:** ${reason}\n`;
              body += `**Target Branch:** \`${targetBranch}\`\n`;
              
              if (nextVersion && targetBranch === 'development') {
                body += `**Impact:** Will create SNAPSHOT \`${nextVersion}-SNAPSHOT\`\n`;
              } else if (nextVersion && (targetBranch === 'master' || targetBranch === 'main')) {
                body += `**Impact:** Will create ${versionType} release \`${nextVersion}\`\n`;
              }
              
              body += `\n### 🚀 Validation Pipeline:\n`;
              body += `1. ✅ Build and compile\n`;
              body += `2. ✅ Run full test suite\n`;
              body += `3. ✅ Code quality analysis\n`;
              body += `4. ✅ Security dependency review\n`;
              body += `5. ✅ Build verification\n`;
              
              if (targetBranch === 'development') {
                body += `\n### 📦 After Merge:\n`;
                body += `- Automatic SNAPSHOT release will be created\n`;
                body += `- Available for testing and development\n`;
              } else if (targetBranch === 'master' || targetBranch === 'main') {
                body += `\n### 🚀 After Merge:\n`;
                body += `- Automatic production release will be created\n`;
                body += `- Published to GitHub Packages\n`;
                body += `- Development branch will be updated to next SNAPSHOT\n`;
              }
            } else {
              body += `### ⏭️ Validation Skipped\n\n`;
              body += `**Reason:** ${reason}\n\n`;
              body += `Only documentation or CI configuration files were changed.\n`;
              body += `This PR can be merged without running the full validation pipeline.`;
            }
            
            // Find and update existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('🔍 Pull Request Impact Analysis')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  # Full validation pipeline - only runs if changes are relevant
  validate:
    name: Full Validation Pipeline
    runs-on: ubuntu-latest
    needs: check-relevance
    if: needs.check-relevance.outputs.should-validate == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and Test
        uses: ./.github/actions/build-and-test
        with:
          java-version: '17'
          run-quality-checks: 'true'
          skip-tests: 'false'

      - name: Dependency Review (Security)
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  # Summary of validation results
  validation-summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [check-relevance, validate]
    if: always()

    steps:
      - name: Generate validation summary
        run: |
          echo "## 🔍 Pull Request Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          SHOULD_VALIDATE="${{ needs.check-relevance.outputs.should-validate }}"
          REASON="${{ needs.check-relevance.outputs.reason }}"
          VALIDATION_RESULT="${{ needs.validate.result }}"
          
          if [ "$SHOULD_VALIDATE" = "true" ]; then
            echo "### ✅ Full Validation Executed" >> $GITHUB_STEP_SUMMARY
            echo "**Reason:** $REASON" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "$VALIDATION_RESULT" = "success" ]; then
              echo "### ✅ All Validations Passed!" >> $GITHUB_STEP_SUMMARY
              echo "- Build and compilation: ✅ Success" >> $GITHUB_STEP_SUMMARY
              echo "- Test execution: ✅ Success" >> $GITHUB_STEP_SUMMARY
              echo "- Code quality checks: ✅ Success" >> $GITHUB_STEP_SUMMARY
              echo "- Security review: ✅ Success" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🚀 **This PR is ready to merge!**" >> $GITHUB_STEP_SUMMARY
              
              NEXT_VERSION="${{ needs.check-relevance.outputs.next-version }}"
              if [ -n "$NEXT_VERSION" ]; then
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "**After merge:** Version \`$NEXT_VERSION\` will be automatically released" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "### ❌ Validation Failed" >> $GITHUB_STEP_SUMMARY
              echo "Some validation checks failed. Please review and fix the issues." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Validation Status:** $VALIDATION_RESULT" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ⏭️ Validation Skipped" >> $GITHUB_STEP_SUMMARY
            echo "**Reason:** $REASON" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Only documentation or CI configuration changes detected." >> $GITHUB_STEP_SUMMARY
            echo "🚀 **This PR can be merged without full validation.**" >> $GITHUB_STEP_SUMMARY
          fi