name: Development Snapshot Release

on:
  push:
    branches: [development]
    paths:
      - 'src/**'
      - 'pom.xml'
      - '**.java'
      - '**.xml'
      - '**.yaml'
      - '**.yml'
      - '**.properties'
      - '!.github/**'
      - '!**.md'
      - '!.gitignore'

permissions:
  contents: write
  packages: write

jobs:
  snapshot-release:
    name: Create Development Snapshot
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Check if snapshot release is needed
        id: check_release
        uses: ./.github/actions/check-release-relevance
        with:
          base-ref: ${{ github.event.before && github.event.before != '0000000000000000000000000000000000000000' && github.event.before || 'HEAD~1' }}
          head-ref: ${{ github.sha }}

      - name: Skip if no relevant changes
        if: steps.check_release.outputs.should-release != 'true'
        run: |
          echo "‚è≠Ô∏è Skipping snapshot release - no relevant changes found"
          echo "Reason: ${{ steps.check_release.outputs.reason }}"
          exit 0

      - name: Manage SNAPSHOT version
        id: snapshot_version
        run: |
          # Get current version
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current version in development: $CURRENT_VERSION"
          
          # Ensure it's a SNAPSHOT version
          if [[ ! "$CURRENT_VERSION" == *-SNAPSHOT ]]; then
            echo "‚ùå Development branch must have SNAPSHOT version, found: $CURRENT_VERSION"
            
            # Convert to SNAPSHOT by incrementing patch version
            BASE_VERSION=${CURRENT_VERSION}
            IFS='.' read -r -a version_parts <<< "$BASE_VERSION"
            MAJOR=${version_parts[0]}
            MINOR=${version_parts[1]}
            PATCH=${version_parts[2]}
            
            # Increment patch for next development cycle
            NEW_PATCH=$((PATCH + 1))
            SNAPSHOT_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}-SNAPSHOT"
            
            echo "Converting to SNAPSHOT version: $SNAPSHOT_VERSION"
            mvn versions:set -DnewVersion=$SNAPSHOT_VERSION -DgenerateBackupPoms=false
            
            # Commit the version change
            git add pom.xml
            git commit -m "chore: convert to SNAPSHOT version $SNAPSHOT_VERSION

            Development branch should always use SNAPSHOT versions.
            Converted from $CURRENT_VERSION to $SNAPSHOT_VERSION."
            
            git push origin development
            
            CURRENT_VERSION=$SNAPSHOT_VERSION
          fi
          
          echo "snapshot_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "‚úÖ Using SNAPSHOT version: $CURRENT_VERSION"

      - name: Build and Test SNAPSHOT
        uses: ./.github/actions/build-and-test
        with:
          java-version: '17'
          run-quality-checks: 'true'
          skip-tests: 'false'

      - name: Publish SNAPSHOT to GitHub Packages
        run: |
          echo "Publishing SNAPSHOT to GitHub Packages..."
          mvn deploy -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create snapshot tag and pre-release
        id: create_prerelease
        run: |
          SNAPSHOT_VERSION="${{ steps.snapshot_version.outputs.snapshot_version }}"
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
          TAG_NAME="snapshot-${SNAPSHOT_VERSION}-${TIMESTAMP}"
          
          echo "Creating snapshot tag: $TAG_NAME"
          
          # Create lightweight tag (not annotated to avoid conflicts)
          git tag $TAG_NAME
          git push origin $TAG_NAME
          
          # Create GitHub pre-release
          gh release create $TAG_NAME \
            --title "üì¶ Development Snapshot $SNAPSHOT_VERSION" \
            --notes "## üöß Development Snapshot Release

          This is an automated snapshot release from the \`development\` branch.
          
          ### üìã Changes
          ${{ steps.check_release.outputs.reason }}
          
          ### ‚ö†Ô∏è Important Notes
          - **SNAPSHOT version** - for development and testing only
          - Not recommended for production use
          - May contain unstable features
          - Production releases are created from \`master\` branch
          
          ### üì¶ Installation
          \`\`\`xml
          <dependency>
              <groupId>com.carlosmgv02</groupId>
              <artifactId>logging-library</artifactId>
              <version>$SNAPSHOT_VERSION</version>
          </dependency>
          \`\`\`
          
          ### üîó GitHub Packages
          This version is available in GitHub Packages. See [CONSUMER_SETUP.md](.github/CONSUMER_SETUP.md) for configuration instructions." \
            --prerelease \
            target/*.jar
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate snapshot summary
        run: |
          SNAPSHOT_VERSION="${{ steps.snapshot_version.outputs.snapshot_version }}"
          
          echo "## üì¶ Development Snapshot Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Snapshot Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** \`$SNAPSHOT_VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`development\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Type:** Development Snapshot (Pre-release)" >> $GITHUB_STEP_SUMMARY
          echo "- **Published:** GitHub Packages ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Quality Checks" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests:** ‚úÖ All passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Build:** ‚úÖ Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality Analysis:** ‚úÖ Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üöÄ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. **Test the snapshot** in your development environment" >> $GITHUB_STEP_SUMMARY
          echo "2. **Configure your project** using [CONSUMER_SETUP.md](.github/CONSUMER_SETUP.md)" >> $GITHUB_STEP_SUMMARY
          echo "3. **When ready**, merge \`development\` ‚Üí \`master\` for production release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Installation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`xml" >> $GITHUB_STEP_SUMMARY
          echo "<dependency>" >> $GITHUB_STEP_SUMMARY
          echo "    <groupId>com.carlosmgv02</groupId>" >> $GITHUB_STEP_SUMMARY
          echo "    <artifactId>logging-library</artifactId>" >> $GITHUB_STEP_SUMMARY
          echo "    <version>$SNAPSHOT_VERSION</version>" >> $GITHUB_STEP_SUMMARY
          echo "</dependency>" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY