name: Snapshot Release

on:
  push:
    branches: [development]
    paths:
      - 'src/**'
      - 'pom.xml'
      - '**.java'
      - '**.xml'
      - '**.yaml'
      - '**.yml'
      - '**.properties'
      - '!.github/**'
      - '!**.md'
      - '!.gitignore'

permissions:
  contents: write
  packages: write

jobs:
  snapshot-release:
    name: Create Snapshot Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Check if snapshot release is needed
        id: check_release
        uses: ./.github/actions/check-release-relevance
        with:
          base-ref: ${{ github.event.before && github.event.before != '0000000000000000000000000000000000000000' && github.event.before || 'HEAD~1' }}
          head-ref: ${{ github.sha }}

      - name: Skip if no relevant changes
        if: steps.check_release.outputs.should-release != 'true'
        run: |
          echo "⏭️ Skipping snapshot release - no relevant changes found"
          echo "Reason: ${{ steps.check_release.outputs.reason }}"
          exit 0

      - name: Get current version and ensure SNAPSHOT
        id: current_version
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current version: $CURRENT_VERSION"
          
          # Ensure version ends with -SNAPSHOT
          if [[ ! "$CURRENT_VERSION" == *-SNAPSHOT ]]; then
            # Convert to SNAPSHOT version
            SNAPSHOT_VERSION="${CURRENT_VERSION}-SNAPSHOT"
            echo "Converting to SNAPSHOT version: $SNAPSHOT_VERSION"
            mvn versions:set -DnewVersion=$SNAPSHOT_VERSION -DgenerateBackupPoms=false
            CURRENT_VERSION=$SNAPSHOT_VERSION
          fi
          
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Run tests
        run: |
          echo "Running tests before snapshot release..."
          mvn clean test

      - name: Build and package
        run: |
          echo "Building snapshot artifacts..."
          mvn clean package -DskipTests
          mvn javadoc:javadoc
          mvn source:jar

      - name: Publish to GitHub Packages
        run: |
          echo "Publishing SNAPSHOT to GitHub Packages..."
          mvn deploy -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create snapshot tag
        id: snapshot_tag
        run: |
          VERSION="${{ steps.current_version.outputs.version }}"
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
          TAG_NAME="snapshot-${VERSION}-${TIMESTAMP}"
          
          echo "Creating snapshot tag: $TAG_NAME"
          git tag -a $TAG_NAME -m "Snapshot release ${VERSION} - ${TIMESTAMP}

          Development snapshot with latest changes from development branch.
          
          Features and changes included:
          - Latest development code
          - All tests passing
          - Ready for testing and integration
          
          Note: This is a development snapshot, not a production release."

          git push origin $TAG_NAME
          
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub pre-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.snapshot_tag.outputs.tag_name }}
          release_name: "📦 Snapshot ${{ steps.snapshot_tag.outputs.version }}"
          body: |
            ## 🚧 Development Snapshot Release
            
            This is an automated snapshot release from the `development` branch.
            
            ### 📋 What's New
            ${{ steps.check_release.outputs.reason }}
            
            ### 🔍 Changes Since Last Release
            - Latest development code
            - All automated tests passing
            - Ready for integration testing
            
            ### ⚠️ Important Notes
            - **This is a SNAPSHOT version** - not recommended for production
            - Use for testing and development only
            - Production releases are created from the `master` branch
            
            ### 📦 Artifacts
            - JAR file with latest code
            - Source code JAR
            - Javadoc documentation
            
            ### 🔗 Installation
            ```xml
            <dependency>
                <groupId>com.carlosmgv02</groupId>
                <artifactId>logging-library</artifactId>
                <version>${{ steps.snapshot_tag.outputs.version }}</version>
            </dependency>
            ```
          draft: false
          prerelease: true

      - name: Upload snapshot artifacts
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-artifacts
          path: |
            target/*.jar
            target/site/apidocs/
          retention-days: 30

      - name: Generate snapshot summary
        run: |
          echo "## 📦 Snapshot Release Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** \`${{ steps.snapshot_tag.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag:** \`${{ steps.snapshot_tag.outputs.tag_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Type:** Development Snapshot (Pre-release)" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`development\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Test the snapshot in your development environment" >> $GITHUB_STEP_SUMMARY
          echo "2. When ready, merge \`development\` → \`master\` for production release" >> $GITHUB_STEP_SUMMARY
          echo "3. Production release will be automatically created on merge" >> $GITHUB_STEP_SUMMARY
