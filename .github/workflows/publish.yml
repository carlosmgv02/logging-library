name: Publish to Maven Central & GitHub Packages

on:
  release:
    types: [published, released, created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish'
        required: false
        default: 'current'

permissions:
  contents: write
  packages: write
  issues: write

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Get current version info
        id: version_info
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            RELEASE_TAG=${GITHUB_REF#refs/tags/}
            echo "Release tag: $RELEASE_TAG"
            # Remove 'v' prefix if present
            RELEASE_VERSION=${RELEASE_TAG#v}
            echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          fi

          # Get current version from pom.xml
          MAVEN_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "maven_version=$MAVEN_VERSION" >> $GITHUB_OUTPUT

          echo "Maven POM version: $MAVEN_VERSION"
          if [ "${{ github.event_name }}" == "release" ]; then
            echo "Release version: $RELEASE_VERSION"
          fi

      - name: Verify version consistency
        if: github.event_name == 'release'
        run: |
          MAVEN_VERSION="${{ steps.version_info.outputs.maven_version }}"
          RELEASE_VERSION="${{ steps.version_info.outputs.release_version }}"

          echo "Verifying version consistency..."
          echo "Maven POM version: $MAVEN_VERSION"
          echo "Release tag version: $RELEASE_VERSION"

          if [ "$MAVEN_VERSION" != "$RELEASE_VERSION" ]; then
            echo "‚ùå ERROR: Version mismatch!"
            echo "pom.xml has version $MAVEN_VERSION but release tag is $RELEASE_VERSION"
            echo "This indicates the auto-release workflow didn't update pom.xml correctly."
            exit 1
          else
            echo "‚úÖ Version consistency verified: $MAVEN_VERSION"
          fi

      - name: Run tests and validation
        run: |
          echo "Running tests..."
          mvn clean test
          echo "Running integration tests..."
          mvn verify

      - name: Set up Maven Central publishing
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Set up GitHub Packages publishing
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: github
          server-username: GITHUB_ACTOR
          server-password: GITHUB_TOKEN

      - name: Configure Maven settings
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml << 'EOF'
          <settings>
            <servers>
              <server>
                <id>central</id>
                <username>${env.MAVEN_USERNAME}</username>
                <password>${env.MAVEN_PASSWORD}</password>
              </server>
              <server>
                <id>github</id>
                <username>${env.GITHUB_ACTOR}</username>
                <password>${env.GITHUB_TOKEN}</password>
              </server>
            </servers>
            <profiles>
              <profile>
                <id>github</id>
                <repositories>
                  <repository>
                    <id>central</id>
                    <url>https://repo1.maven.org/maven2</url>
                  </repository>
                  <repository>
                    <id>github</id>
                    <url>https://maven.pkg.github.com/${{ github.repository }}</url>
                  </repository>
                </repositories>
              </profile>
            </profiles>
            <activeProfiles>
              <activeProfile>github</activeProfile>
            </activeProfiles>
          </settings>
          EOF

      - name: Build and generate artifacts
        run: |
          echo "Building project and generating all artifacts..."
          mvn clean compile
          mvn package -DskipTests
          mvn javadoc:jar
          mvn source:jar

      - name: Verify artifacts
        run: |
          echo "Verifying generated artifacts..."
          ls -la target/

          # Check for required artifacts
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          ARTIFACT_ID=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)

          MAIN_JAR="target/${ARTIFACT_ID}-${VERSION}.jar"
          SOURCES_JAR="target/${ARTIFACT_ID}-${VERSION}-sources.jar"
          JAVADOC_JAR="target/${ARTIFACT_ID}-${VERSION}-javadoc.jar"

          echo "Checking for required artifacts:"
          echo "- Main JAR: $MAIN_JAR"
          [ -f "$MAIN_JAR" ] && echo "  ‚úÖ Found" || echo "  ‚ùå Missing"
          echo "- Sources JAR: $SOURCES_JAR"
          [ -f "$SOURCES_JAR" ] && echo "  ‚úÖ Found" || echo "  ‚ùå Missing"
          echo "- Javadoc JAR: $JAVADOC_JAR"
          [ -f "$JAVADOC_JAR" ] && echo "  ‚úÖ Found" || echo "  ‚ùå Missing"

      - name: Sign artifacts (for Maven Central)
        if: env.GPG_PRIVATE_KEY != ''
        run: |
          echo "Signing artifacts for Maven Central..."
          mvn gpg:sign-and-deploy-file -DgroupId=com.carlosmgv02 -DartifactId=logging-library -Dversion=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout) -Dpackaging=jar -Dfile=target/logging-library-$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout).jar -DrepositoryId=central -Durl=https://central.sonatype.com/api/v1/publisher/upload -Dgpg.passphrase=${MAVEN_GPG_PASSPHRASE}
        env:
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Publish to GitHub Packages
        run: |
          echo "Publishing to GitHub Packages..."
          mvn deploy -DskipTests -Pgh-packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to Maven Central (if configured)
        if: env.MAVEN_USERNAME != '' && env.MAVEN_PASSWORD != ''
        run: |
          echo "Publishing to Maven Central..."
          mvn deploy -DskipTests -Pcentral
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Verify GitHub Packages publication
        continue-on-error: true
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Waiting for GitHub Packages to update..."
          sleep 10

          echo "Verifying publication on GitHub Packages..."
          curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/users/${{ github.repository_owner }}/packages/maven/com.carlosmgv02.logging-library/versions \
               | jq '.[] | select(.name=="'$VERSION'")'

      - name: Verify Maven Central publication (if applicable)
        if: env.MAVEN_USERNAME != '' && env.MAVEN_PASSWORD != ''
        continue-on-error: true
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Waiting for Maven Central to update..."
          sleep 30

          echo "Verifying publication on Maven Central..."
          curl -s "https://central.sonatype.com/api/v1/publisher/published?namespace=com.carlosmgv02&name=logging-library&version=$VERSION" || echo "Not yet available"
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_CENTRAL_TOKEN }}

      - name: Update GitHub release
        if: github.event_name == 'release'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = '${{ steps.version_info.outputs.maven_version }}';
            const releaseId = context.payload.release.id;

            const publicationInfo = `

            ---

            ## üì¶ **Publication Status**

            ### GitHub Packages
            ‚úÖ **Published to GitHub Packages**

            **Installation via GitHub Packages:**
            \`\`\`xml
            <dependency>
                <groupId>com.carlosmgv02</groupId>
                <artifactId>logging-library</artifactId>
                <version>${version}</version>
            </dependency>
            \`\`\`

            **Repository Configuration:**
            \`\`\`xml
            <repositories>
                <repository>
                    <id>github</id>
                    <url>https://maven.pkg.github.com/${{ github.repository }}</url>
                </repository>
            </repositories>
            \`\`\`

            ### Maven Central
            ${ process.env.MAVEN_USERNAME ? '‚úÖ **Published to Maven Central**' : '‚è≥ **Maven Central publication not configured**' }

            ${ process.env.MAVEN_USERNAME ? `
            **Installation via Maven Central:**
            \`\`\`xml
            <dependency>
                <groupId>com.carlosmgv02</groupId>
                <artifactId>logging-library</artifactId>
                <version>${version}</version>
            </dependency>
            \`\`\`

            üîó **Maven Central:** https://central.sonatype.com/artifact/com.carlosmgv02/logging-library
            ` : `
            To publish to Maven Central, configure these secrets:
            - \`MAVEN_CENTRAL_USERNAME\`
            - \`MAVEN_CENTRAL_TOKEN\`
            - \`GPG_PRIVATE_KEY\`
            - \`GPG_PASSPHRASE\`
            ` }

            ### Links
            - üè† **GitHub Repository:** https://github.com/${{ github.repository }}
            - üì¶ **GitHub Packages:** https://github.com/${{ github.repository }}/packages
            - üìö **Documentation:** https://github.com/${{ github.repository }}#readme
            `;

            // Update the release body
            const currentRelease = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId
            });

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              body: currentRelease.data.body + publicationInfo
            });

            console.log('‚úÖ Updated GitHub release with publication information');

  notify-success:
    runs-on: ubuntu-latest
    needs: publish
    if: success()

    steps:
      - name: Success notification
        run: |
          echo "‚úÖ Professional Logging Library successfully published!"
          echo "üì¶ Package: com.carlosmgv02:logging-library"
          echo "üè∑Ô∏è  Version: ${{ needs.publish.outputs.version || github.ref_name }}"
          echo "üì¶ GitHub Packages: https://github.com/${{ github.repository }}/packages"
          echo "üîó Maven Central: https://central.sonatype.com/artifact/com.carlosmgv02/logging-library"
          echo "üîó GitHub Release: ${{ github.event.release.html_url }}"

  notify-failure:
    runs-on: ubuntu-latest
    needs: publish
    if: failure()

    steps:
      - name: Failure notification
        run: |
          echo "‚ùå Failed to publish Professional Logging Library"
          echo "üìã Check the logs above for details"
          echo "üîç Common issues:"
          echo "  - Maven Central credentials expired or invalid"
          echo "  - GPG key configuration issues"
          echo "  - Version already exists"
          echo "  - Build or test failures"
          echo "  - Version mismatch between pom.xml and release tag"
          echo "  - Network connectivity issues"
          echo ""
          echo "üîß Configuration required for Maven Central:"
          echo "  - MAVEN_CENTRAL_USERNAME: Your Sonatype username"
          echo "  - MAVEN_CENTRAL_TOKEN: Your Sonatype token"
          echo "  - GPG_PRIVATE_KEY: Your GPG private key"
          echo "  - GPG_PASSPHRASE: Your GPG key passphrase"
          exit 1